(* slang Grammar *)

(* Base expression grammar *)
(* expression = LITERAL | unary | binary | grouping;
unary = ( "+" | "-" | "!" ) expression;
binary = expression, operator, expression;
grouping = "(", expression, ")"; *)

(* Disambiguated + precedence-based *)
(* expression = equality;
equality = comparison, [ ("==" | "!="), comparison ];
comparison = term, [ ("<" | "<=" | ">" | ">="), term ];
term = factor, [ ("+" | "-"), factor ];
factor = unary, [ ("*" | "/"), unary ];
unary = ("!" | "+" | "-"), unary | primary;
primary = grouping | LITERAL;
grouping = "(", expression, ")"; *)

(* Precedence is handled through metadata *)
expression = primary | unary | binary;
unary = ("!" | "+" | "-"), primary;
binary = primary, ("==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/"), primary;
primary = grouping | LITERAL;
grouping = "(", expression, ")";

(* Literals *)

LITERAL = NUMBER | STRING | BOOLEAN | NULL;

NULL = "null";

BOOLEAN = "true" | "false";

STRING = '"', STRING_CONTENT, '"';

STRING_CONTENT = { (CHARACTER - '"' | '\"') };

CHARACTER = ? all valid unicode characters ?;

NUMBER = INTEGER | FLOAT;

FLOAT = INTEGER, ".", DIGIT, { DIGIT };

(* NB: We allow numbers to start with an unlimited number of 0; eg. 1 == 01 == 001... *)
INTEGER = DIGIT, { DIGIT };

DIGIT =  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";